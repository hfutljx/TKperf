#!/usr/bin/env python
'''
Created on 27.06.2012

@author: gschoenb
'''
import argparse
import logging
from os import makedirs
from os import path
from os import walk
import zipfile

from perfTest.Devices import SSD
from perfTest.Devices import HDD
from perfTest.Options import Options
from perfTest.PerfTest import SsdPerfTest
from perfTest.PerfTest import HddPerfTest
import perfTest.PerfTest as pT
import plots.compPlots as pcp

if __name__ == '__main__':
    tkPerfVersion = "TKperf Version: " + pT.__version__
    parser = argparse.ArgumentParser()

    parser.add_argument("mode", help="specify the test mode for the device", choices=["hdd","ssd","raid"])
    parser.add_argument("xmls", help="XML files to read from", type=str, nargs='+')

    parser.add_argument("-v","--version", help="get the version information", action='version',version=tkPerfVersion)
    parser.add_argument("-d","--debug", help="get detailed debug information",action ='store_true')
    parser.add_argument("-q","--quiet", help="turn off logging of info messages",action ='store_true')
    parser.add_argument("-f","--folder", help="store compare plots in a subfolder, specify name of folder",type=str)
    parser.add_argument("-z","--zip",help="store compare plots in a zip archive, requires '-f' as zip is created from subfolder",
                        action ='store_true')

    args = parser.parse_args()
    if args.debug == True:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.DEBUG)
    if args.quiet == True:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.WARNING)
    else:
        logging.basicConfig(filename='tkperf-cmp.log',level=logging.INFO)

    # Strip the filename suffix as it is appended automatically
    for i,file in enumerate(args.xmls):
        if file.endswith('.xml'):
            file = file[:-4]
        args.xmls[i] = file
    # Check if plots go into a subfolder
    if args.folder != None:
        try: 
            makedirs(args.folder)
        except OSError:
            if not path.isdir(args.folder):
                raise
    # Generate objects and plots
    toCompare = []
    for file in args.xmls:
        if args.mode == 'ssd' or args.mode == 'raid':
            options = Options()
            dummyDev = SSD('ssd',None,file)
            myTest = SsdPerfTest(file, dummyDev, options)
        if args.mode == 'hdd':
            options = Options()
            dummyDev = HDD('hdd',None,file)
            myTest = HddPerfTest(file, dummyDev, options)
        myTest.fromXml()
        toCompare.append(myTest)

    if args.mode == 'ssd' or args.mode == 'raid':
    	pcp.compWriteSatIOPSPlt(toCompare, args.folder)
	pcp.compILPlt(toCompare, 'LAT', args.folder)
    pcp.compILPlt(toCompare, 'IOPS', args.folder)
    pcp.compTPPlt(toCompare, args.folder)
    # Check if a zip archive should be created
    if args.zip:
        if args.folder == None:
            print "### Error! ###"
            print "Please use Option '-f' in conjunction with '-z'."
        else:
            zfile = zipfile.ZipFile(args.folder+'.zip', 'w')
            for root, dirs, files in walk(args.folder):
                for file in files:  
                    zfile.write(path.join(root, file))
            zfile.close()
    exit(0)